package com.example.MailSender.controller;


import com.example.MailSender.model.User;
import com.example.MailSender.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;


@Controller
public class MainController {

    @GetMapping("/")
    public String home( Model model) {
        model.addAttribute("title", "Главная страница");
        return "home";
    }

    @Controller // This means that this class is a Controller
    @RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
    public static class MController {
        @Autowired // This means to get the bean called userRepository
        // Which is auto-generated by Spring, we will use it to handle the data
        private UserRepository userRepository;

        @Autowired
        private JavaMailSender emailSender;

        @PostMapping(path="/add") // Map ONLY POST Requests
        public @ResponseBody
        String addNewUser (@RequestParam String name
                , @RequestParam String email) {
            // @ResponseBody means the returned String is the response, not a view name
            // @RequestParam means it is a parameter from the GET or POST request

            User n = new User();
            n.setName(name);
            n.setEmail(email);
            userRepository.save(n);
            return "Saved";
        }

        @GetMapping(path="/all")
        public @ResponseBody Iterable<User> getAllUsers() {
            // This returns a JSON or XML with the users
            return userRepository.findAll();
        }

        @GetMapping(path="/find")
        public @ResponseBody
        Optional<User> findUser(@RequestParam Integer id) {
            // This returns a JSON or XML with the users
            return userRepository.findById(id);
        }

        @GetMapping(path="/send")
        public @ResponseBody
        String sendEmail(@RequestParam Integer id) {
            // Create a Simple MailMessage.
            SimpleMailMessage message = new SimpleMailMessage();

            message.setTo(userRepository.findById(id).get().getEmail());
            message.setSubject("Test Simple Email");
            message.setText("Hello, Im testing Simple Email");

            // Send Message!
            this.emailSender.send(message);

            return "Email Sent!";

        }
    }
}